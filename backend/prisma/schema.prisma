// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

enum ChannelType {
	PUBLIC
	PROTECTED
	PRIVATE
}

enum ChannelRole {
	USER
	ADMIN
	OWNER
}

model User {
  id Int @id @default(autoincrement())
  email     String   @unique
  username  String
  firstName String?
  lastName  String?
  hash      String?
  profilePic String?
  twoFactorSecret String?
  twoFactorEnabled Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blocked             User[]        @relation("blocked")
  blockedBy           User[]        @relation("blocked")
  bannedOf            Channel[]
  channelUser         ChannelUser[]
  messages            Message[] // Not in ChannelUser for message persistence

  @@map("Users")
}

model ChannelUser {
	id        Int         @id @default(autoincrement())
	user      User        @relation(fields: [userId], references: [id])
	userId    Int
	channel   Channel     @relation(fields: [channelId], references: [id])
	channelId Int
	role      ChannelRole

	@@unique([userId, channelId])
}

model Channel {
	id        Int           @id @default(autoincrement())
	createdAt DateTime      @default(now())
	updatedAt DateTime      @updatedAt
	name      String        @unique
	type      ChannelType
	password  String?
	users     ChannelUser[]
	messages  Message[]
	isDM      Boolean       @default(false) // is Direct Message
	bans      User[]
}

model Message {
	id        Int      @id @default(autoincrement())
	createdAt DateTime @default(now())
	channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
	channelId Int
	author    User     @relation(fields: [authorId], references: [id])
	authorId  Int
	content   String
}
